<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="256" />
    <option name="newTranslationDialogWidth" value="562" />
    <option name="newTranslationDialogX" value="728" />
    <option name="newTranslationDialogY" value="358" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="before Invocation" />
      <item value="MINUTES" />
      <item value="MAX SAFE EVENT AGE" />
      <item value="idle Times" />
      <item value="queued" />
      <item value="millis" />
      <item value="No eventType type in attributes or eventType type is not a String" />
      <item value="The resource pack allowance has been exhausted, please check your resource pack" />
      <item value="number" />
      <item value="接口呼保存的用户自定义字段" />
      <item value="get Local Address" />
      <item value="is Get Charset From Content" />
      <item value="之前" />
      <item value="set If Absent" />
      <item value="CHANUNAVAIL" />
      <item value="INUSE" />
      <item value="UNAVAILABLE" />
      <item value="hint" />
      <item value="Bridge Exec Event" />
      <item value="A BridgeEvent is triggered when a link between two voice channels is established (&quot;Link&quot;) or discontinued (&quot;Unlink&quot;). As of Asterisk 1.6 the Bridge event is reported directly by Asterisk. Asterisk versions up to 1.4 report individual events: LinkEvent and UnlinkEvent.For maximum compatibily do not use the Link and Unlink events in your code. Just use the Bridge event and check for isLink() and isUnlink(). It is implemented in channel.c" />
      <item value="manner" />
      <item value="originate" />
      <item value="try to reconnect quite fast for the firt 10 times this succeeds if the server has just been restarted" />
      <item value="now the DisconnectEvent is dispatched to registered eventListeners (clients) and after that the ManagerReaderThread is gone. So effectively we replaced the reader thread by a ReconnectThread." />
      <item value="close socket if still open and remove reference to readerThread After sending the DisconnectThread that thread will die anyway." />
      <item value="cleanup Action Listeners" />
      <item value="ResponseEvent without internalActionId: this happens if the same event class is used as response event and as an event that is not triggered by a Manager command Example: QueueMemberStatusEvent. logger.debug(&quot;ResponseEvent without &quot; + &quot;internalActionId:\n&quot; + responseEvent);" />
      <item value="if this turns out to be slow, we could consider caching the" />
      <item value="dispatch Legacy Event If Needed" />
      <item value="Some events need special treatment besides forwarding them to the registered eventListeners (clients) These events are handled here at first:" />
      <item value="fire Event" />
      <item value="received the news" />
      <item value="file" />
      <item value="Please file a bug." />
      <item value="caller Id Num" />
      <item value="you should expect problems to follow." />
      <item value="follow" />
      <item value="&quot;Unable to determine asterisk version, assuming" />
      <item value="identifier" />
      <item value="protocol" />
      <item value="Got asterisk protocol identifier version" />
      <item value="Lockable List" />
      <item value="agent Logout" />
      <item value="AGENT LOGGIN PREFIX" />
      <item value="plaintext" />
      <item value="modified Content Before Push" />
      <item value="dest Alias" />
      <item value="retrofit Content" />
      <item value="first time this request being called, so perform security checking" />
      <item value="Access failed, permission exception" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="497" />
        <entry key="ENGLISH" value="497" />
        <entry key="FRENCH" value="1" />
        <entry key="HAITIAN_CREOLE" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="LUXEMBOURGISH" value="1" />
        <entry key="SCOTS_GAELIC" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663910957148" />
  </component>
  <component name="Settings">
    <option name="showReplacementActionInContextMenu" value="true" />
    <option name="translateDocumentation" value="true" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1678077533078" />
  </component>
  <component name="Translation.Settings">
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="590" />
    <option name="newTranslationDialogX" value="815" />
    <option name="newTranslationDialogY" value="450" />
    <histories>
      <item value="assembling" />
      <item value="A HangupEvent is triggered when a channel is requested hung up." />
      <item value="AST STATE UP" />
      <item value="Returns the new state of the channel as a descriptive text. This is an alias for getChannelStateDesc(). Deprecated as of 1.0.0, use getChannelStateDesc() instead or even better switch to numeric values as returned by getChannelState(). Returns: the new state of the channel as a descriptive text." />
      <item value="additional" />
      <item value="wizard" />
      <item value="save Pjsip Trunks Wizard" />
      <item value="Returns a java.util.Map of the parameters of this request. Request parameters are extra information sent with the request. For HTTP servlets, parameters are contained in the query string or posted form data." />
      <item value="Media Type" />
      <item value="Returns the MIME type of the body of the request, or &lt;code&gt;null&lt;code&gt; if the type is not known. For HTTP servlets, same as the value of the CGI variable CONTENT_TYPE." />
      <item value="eturns an unmodifiable view of the specified map. This method allows modules to provide users with &quot;read-only&quot; access to internal maps. Query operations on the returned map &quot;read through&quot; to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an UnsupportedOperationException. The returned map will be serializable if the specified map is serializable. Params: m – the map for which an unmodifiable view is to be returned. Type parameters: &lt;K&gt; – the class of the map keys &lt;V&gt; – the class of the map values Returns: an unmodifiable view of the specified map." />
      <item value="Channel has detected an incoming call and is waiting for ring." />
      <item value="Digits (or equivalent) have been dialed while offhook." />
      <item value="Line is busy." />
      <item value="Line is up." />
      <item value="Remote end is ringing." />
      <item value="Digits (or equivalent) have been dialed." />
      <item value="Channel is off hook." />
      <item value="Channel is down, but reserved." />
      <item value="Channel is down and available." />
      <item value="if this turns out to be slow, we could consider caching the" />
      <item value="Returns the name of the Asterisk server from which this event has been received. This property is only available when using to AstManProxy. Returns: the name of the Asterisk server from which this event has been received or null when directly connected to an Asterisk server instead of AstManProxy." />
      <item value="Returns the timestamp for this event. The timestamp property is available in Asterisk since 1.4 if enabled in manager.conf by setting timestampevents = yes. In contains the time the event was generated in seconds since the epoch. Example: 1159310429.569108 Returns: the timestamp for this event." />
      <item value="The server from which this event has been received (only used with AstManProxy)." />
      <item value="The point in time this event has been received from the Asterisk server." />
      <item value="The object on which the Event initially occurred." />
      <item value="Compiles the given regular expression into a pattern with the given flags. Params: regex – The expression to be compiled flags – Match flags, a bit mask that may include CASE_INSENSITIVE, MULTILINE, DOTALL, UNICODE_CASE, CANON_EQ, UNIX_LINES, LITERAL, UNICODE_CHARACTER_CLASS and COMMENTS Returns: the given regular expression compiled into a pattern with the given flags Throws: IllegalArgumentException – If bit values other than those corresponding to the defined match flags are set in flags PatternSyntaxException – If the expression's syntax is invalid" />
      <item value="compile" />
      <item value="encrypted Number Character" />
      <item value="Please fill [Preference -&gt; Apifox Helper -&gt; Personal Access Token] before uploading APIs." />
      <item value="Unable to dispatch null event. This should never happen. Please file a bug. msg" />
      <item value="refactor" />
      <item value="Backwards compatibility for bridge events. Asterisk 13 uses BridgeCreate, BridgeEnter, BridgeLeave and BridgeDestroy events. So here we track active bridges and simulate BridgeEvent's for them allowing legacy code to still work with BridgeEvent's" />
      <item value="Consider defining a bean of type 'org.asteriskjava.manager.internal.Dispatcher' in your configuration." />
      <item value="Pump" />
      <item value="Async Event Pump" />
      <item value="When compiling without debug info, or when interpreting pointcuts at runtime, the names of any arguments used in the pointcut are not available. Under these circumstances only, it is necessary to provide the arg names in the annotation - these MUST duplicate the names used in the annotated method. Format is a simple comma-separated list." />
      <item value="Creates a LinkedBlockingQueue with the given (fixed) capacity. Params: capacity – the capacity of this queue Throws: IllegalArgumentException – if capacity is not greater than zero" />
      <item value="deregister Event Class" />
      <item value="A dial event is triggered whenever a phone attempts to dial someone." />
      <item value="A StatusEvent is triggered for each active channel in response to a StatusAction." />
      <item value="A VarSetEvent is triggered when a channel or global variable is set in Asterisk." />
      <item value="A MonitorStartEvent indicates that monitoring was started on a channel. Available since Asterisk 1.6. It is implemented in resres_monitor.c" />
      <item value="Queue Member Event" />
      <item value="wrapuptime" />
      <item value="cursor" />
      <item value="完事顺利" />
      <item value="完事" />
      <item value="Everything" />
      <item value="up-to-date" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="77" />
        <entry key="ENGLISH" value="78" />
      </map>
    </option>
  </component>
</application>